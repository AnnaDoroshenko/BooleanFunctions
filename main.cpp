#include <iostream>
#include <exception>
#include "Function.h"


int main() {

    std::vector<std::string> testFunctions = {"00011110011111010010011010001010",
    "00011111101011010010011010001010", 
    "0101101101010010010100000101111001011011101110001101010100101100",
    "0111100110101101001001101000011001111001101011010010011010000110",
    "1100111000111010001001101001110001110010001110001101010100101110",
    "1010000011110000110000111100001111110110111100001100001111001010",
    "0000001111111110000011110000111000000011111111001101010111100000",
    "1010011111110000110000111100001100010110111100001100001111001010",
    "0101101101010010010100000101111001011011101110001101010100101100",
    "1101000011100001001001101011101011000010011001011010011010111110",
    "0111100110101101001001101000011001111001101011010010011010000110",
    "1101000011100001001001101011101011000010011001011010011010111110",
    "1100111000111010001001101001110001110010001110001101010100101110",
    "0000001101010010010111100000111011111011101110001101010100101100",
    "10100111000100001100001111000011000101101111000011000011110010101010011111110000110010111100001100110110111100001101001111001010",
    "11111111100000000011111111100001111000011000111111001111000011100000000011111100000000000000001111100011111100010001111011111000",
    "00000011111111100101111110000100100100101010100010101010100010110101101101000100100010010010001111100011111100010101111011111000",
    "00000011111111100101111110000100111111111111100000000000000010110101101101000000000010010010001111100011111100010101111011111000",
    "00001111001111010000001000111111110000111111000001000001111100001111000111110011111110000000000000001111111100010001111011111000",
    "00001111001111000000000000111111110000111111000000000001111100001111000111110011111110000000000000001111111100000001111111111111",
    "11111111111111111000000000111111110000111111000000000001111100001111000111110011111110000000000000001111111100000001111000000000",
    "00001111000011110000111100110011001100110000111100001111000111000111000111000111000111001100110011000011110000111100001111000111",
    "00001111000011110000111100110011001100110000111100001111000111001111000111000111000111001100110011000011110000000000001111111111",
    "00000000000011111111111100110011001100110000111100001111000111001111000111000111000111001100110011000011110000000000001111111111",
    "00000000000011111111111100000000000111111111111000000000000011111111111100000000000011111111111100000000000011111111111111110000",
    "00000000000011111111111100000001000111111111111000000000000011111111111100000000000011111111111110000000000001111111111111100000"};

    for (std::string func : testFunctions) {
        Function testFunction(func);

        try {
            testFunction.calculateNonlinearity();
        } catch(const std::invalid_argument& e) {
            std::cerr << e.what() << std::endl;
        }

        std::vector<std::pair<unsigned int, double>> testStat = testFunction.getSortedStatistics();
        testFunction.calculateMinH(testStat);
        std::cout << "======================================" << std::endl;
        std::cout << "======================================" << std::endl;
    }

    /* Function testFunction("1100111000111010001001101001110001110010001110001101010100101110"); */

    // try {
    //     // std::cout << testFunction.calculateNonlinearity() << std::endl;
    //     testFunction.calculateNonlinearity();
    // } catch(const std::invalid_argument& e) {
    //     std::cerr << e.what() << std::endl;
    // }

    /* std::vector<double> testStat = testFunction.getStatistics(); */
    /* std::vector<std::pair<unsigned int, double>> testStat = testFunction.getSortedStatistics(); */
    // testFunction.calculateMinH(testStat);
    /* for (unsigned int i = 0; i < testStat.size(); i++) { */
    /*     std::cout << "x" << i << " = " << testStat[i] << std::endl; */
    /* } */

    /* long long num = 46; */
    /* testFunction.getTruthTableForm(num); */

    return 0;
} 
